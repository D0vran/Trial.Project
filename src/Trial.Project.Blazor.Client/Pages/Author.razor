@page "/authors"
@using Volo.Abp.Application.Dtos
@using Trial.Project.Authors
@using Trial.Project.Localization
@using Microsoft.Extensions.Localization
@using Project.Permissions
@using Microsoft.AspNetCore.Authorization
@* @attribute [Authorize(ProjectPermissions.Authors.Default)] *@
@inject IStringLocalizer<ProjectResource> L
@inherits AbpCrudPageBase<IAuthorAppService, AuthorDto, Guid, PagedAndSortedAuthorDto, CreateUpdateAuthorDto>
@inject AbpBlazorMessageLocalizerHelper<ProjectResource> LH

<Card>
	<CardHeader>
		<Row Class="justify-content-between">
			<Column ColumnSize="ColumnSize.IsAuto">
				<h2>@L["Authors"]</h2>
			</Column>
            @* @if(HasCreatePermission) *@
            @* { *@
			<Column ColumnSize="ColumnSize.IsAuto">
				<Button Color = "Color.Primary" 
					Clicked="OpenCreateModalAsync">@L["NewAuthor"]</Button>
			</Column>
            @* } *@
		</Row>
	</CardHeader>
	<CardBody>
        <DataGrid TItem="AuthorDto"
				  Data="Entities"
				  ReadData="OnDataGridReadAsync"
				  TotalItems="TotalCount"
				  ShowPager="true"
				  PageSize="PageSize">
				  <DataGridColumns>
                        <DataGridColumn TItem="AuthorDto"
                                        Field="@nameof(AuthorDto.Name)"
									    Caption="@L["Name"]">
					    </DataGridColumn>
                        <DataGridColumn TItem="AuthorDto"
                                        Field="@nameof(AuthorDto.BirthDate)"
									    Caption="@L["BirthDate"]">
									<DisplayTemplate>
									    @context.BirthDate.ToShortDateString()
									</DisplayTemplate>
						</DataGridColumn>
                        <DataGridColumn TItem="AuthorDto"
                                        Field="@nameof(AuthorDto.CreationTime)"
										Caption="@L["CreationTime"]">
									<DisplayTemplate>
										@context.CreationTime.ToShortDateString()
									</DisplayTemplate>
						</DataGridColumn>
                        <DataGridColumn>

                        </DataGridColumn>

                        <DataGridEntityActionsColumn TItem="AuthorDto" @ref="@EntityActionsColumn">
                            <DisplayTemplate>
                            <EntityActions TItem="AuthorDto" EntityActionsColumn="@EntityActionsColumn">
                            <EntityAction TItem="AuthorDto"
                                                  Text="@L["Edit"]"
                                                  Visible=HasUpdatePermission
                                                  Clicked="() => OpenEditModalAsync(context)" />

                            <EntityAction TItem="AuthorDto"
                                                  Text="@L["Delete"]"
                                                  Visible=HasDeletePermission
                                                  Clicked="() => DeleteEntityAsync(context)" />
                                </EntityActions>
                            </DisplayTemplate>
                        </DataGridEntityActionsColumn>

				  </DataGridColumns>
		</DataGrid>
	</CardBody>
</Card>
<Modal @ref="@CreateModal">
    <ModalBackdrop />
    <ModalContent IsCentered="true">
        <Form>
            <ModalHeader>
                <ModalTitle>@L["NewBook"]</ModalTitle>
                <CloseButton Clicked="CloseCreateModalAsync"/>
            </ModalHeader>
            <ModalBody>
                <Validations @ref="@CreateValidationsRef" Model="@NewEntity" ValidateOnLoad="false">
                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Name"]</FieldLabel>
                            <TextEdit @bind-Text="@NewEntity.Name">
                                <Feedback>
                                    <ValidationError/>
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>
                    <Field>
                        <FieldLabel>@L["BirthDate"]</FieldLabel>
                        <DateEdit TValue="DateTime" @bind-Date="NewEntity.BithDate"/>
                    </Field>
                    <Field>
                        <FieldLabel>@L["ShortBio"]</FieldLabel>
                        <InputTextArea TValue="string" @bind-Value="NewEntity.ShortBio"/>
                    </Field>
                </Validations>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary"
                Clicked="CloseCreateModalAsync">@L["Cancel"]</Button>
                <Button Color="Color.Primary"
                Type="@ButtonType.Submit"
                PreventDefaultOnSubmit="true"
                Clicked="CreateEntityAsync">@L["Save"]</Button>
            </ModalFooter>
        </Form>
    </ModalContent>
</Modal>

<Modal @ref="@EditModal">
    <ModalBackdrop />
    <ModalContent IsCentered="true">
        <Form>
            <ModalHeader>
                <ModalTitle>@EditingEntity.Name</ModalTitle>
                <CloseButton Clicked="CloseEditModalAsync"/>
            </ModalHeader>
            <ModalBody>
                <Validations @ref="@EditValidationsRef" Model="@NewEntity" ValidateOnLoad="false">
                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Name"]</FieldLabel>
                            <TextEdit @bind-Text="@EditingEntity.Name">
                                <Feedback>
                                    <ValidationError/>
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>
                    <Field>
                        <FieldLabel>@L["BirthDate"]</FieldLabel>
                        <DateEdit TValue="DateTime" @bind-Date="NewEntity.BithDate" />
                    </Field>
                    <Field>
                        <FieldLabel>@L["ShortBio"]</FieldLabel>
                        <InputTextArea TValue="string" @bind-Value="NewEntity.ShortBio" />
                    </Field>
                </Validations>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary"
                Clicked="CloseEditModalAsync">@L["Cancel"]</Button>
                <Button Color="Color.Primary"
                Type="@ButtonType.Submit"
                PreventDefaultOnSubmit="true"
                Clicked="UpdateEntityAsync">@L["Save"]</Button>
            </ModalFooter>
        </Form>
    </ModalContent>
</Modal>



@code 
{

}
